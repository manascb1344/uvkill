/* eslint-disable quotes */
///////////
// IMPORTANT: Keys must be lowercase to match lookup logic
///////////

export const RESULT_TYPE_INFO = {
  // =====================
  // Node.js / JavaScript
  // =====================
  node_modules:
    "Holds all the Node packages your project depends on. Can get huge. Deleting it won't hurt. Just run `npm install` to restore it.",
  dist: 'Distribution/build output: compiled, minified, and ready to ship. Delete and rebuild when needed. Commonly used by Node.js, Python, and many other build tools.',
  build:
    'Generic build output. Like a photocopy of your source: disposable and regenerable. WARNING: Generic name; verify contents before deleting.',
  bower_components:
    'Old-school Bower package folder. If you still have this, congrats on archaeological findings.',
  jspm_packages: 'JSPM packages cache. Safe to delete. Reinstall will fix it.',
  '.npm':
    "npm's local cache folder. Free up space if you don't mind re-downloading packages.",
  '.pnpm-store':
    "pnpm's global store. Deleting it frees space but pnpm will re-populate it on next install.",
  '.yarn':
    "Yarn v2+ folder (cache, plugins, etc.). Not strictly 'junk' but can be regenerated.",
  '.cache':
    'Generic cache folder used by many tools (babel, webpack, rollup, etc.). Delete to force fresh work.',
  //   '.cache/webpack':
  //     "Webpack's cache area. Deleting it will make the next build slower but deterministic.",
  //   '.cache/babel-loader':
  //     'Babel/Webpack loader cache. Safe to remove  transforms will re-run.',
  '.parcel-cache':
    "Parcel's cache. Big and regenerable: delete it and Parcel will rebuild from scratch.",
  '.rpt2_cache':
    'Rollup/TypeScript cache (sometimes created by rollup-plugin-typescript2). Safe to delete.',
  '.vite':
    "Vite's prebundle cache (often node_modules/.vite). Delete to force fresh dependency prebundling.",

  // =====================
  // Frontend Frameworks
  // =====================
  '.next':
    'Next.js build/cache folder. Contains server bundles, static files, and caches. Delete to rebuild: Next will regenerate.',
  '.nuxt':
    'Nuxt build folder (compiled server + client pieces). Safe to delete; run your build step to recreate.',
  '.svelte-kit':
    'SvelteKit build artifacts and caches. Delete to force a fresh build.',
  '.astro':
    "Astro's build/cache directory. Safe to remove; Astro will recompile.",
  '.angular':
    'Angular CLI cache and build metadata. Can grow large: delete to force a full rebuild (`ng build` will recreate it).',
  out: "Next.js/Static export output (often named `out`). Safe to delete: it's generated by `next export` or similar. WARNING: Generic name; some IDEs also use `out` for build output.",
  '.expo':
    'Expo project cache and metadata. Safe to trash; `expo start` will rebuild.',
  '.expo-shared':
    'Expo shared assets metadata. Deletable: Expo will recreate it.',
  '.nx': 'Nx workspace cache. Blow it away to force cold builds.',
  '.turbo':
    'Turborepo incremental cache. Nuke to re-run everything from scratch.',
  'storybook-static':
    'Storybook static build output. Delete and rebuild when needed.',
  gatsby_cache:
    'Gatsby build cache (.cache folder) and public output. `.cache` (internal build cache) and `public` (static output). `public` is safe to delete; `.cache` will be rebuilt. WARNING: This description refers to the cache specifically, not the public folder.',
  public:
    'Generic static site output (Hugo, Gatsby, others). Toss it: your build will regenerate. WARNING: Some projects use `public` for source assets, not build output. Verify before deleting!',
  _site:
    'Eleventy/Hugo/Jekyll static output (`_site` for Jekyll/Eleventy). Safe to clear and rebuild.',
  '.vercel':
    'Vercel project/deploy metadata. Usually safe to delete locally but may contain deploy hints.',
  '.now': 'Legacy Zeit/Now deploy data. Safe to remove.',
  '.netlify':
    "Netlify config/cache data. Safe to remove locally if you don't need historical deploy data.",

  // =====================
  // Web bundlers / tool caches
  // =====================
  '.cache-loader':
    'Loader cache used by some bundlers to speed builds. Delete to force cold builds.',
  '.swc': 'SWC cache (if present). Regenerable by your build tools.',
  '.esbuild':
    'esbuild cache area. Safe to delete: esbuild will re-run transforms.',
  '.rollup.cache':
    'Rollup cache dir (if configured). Zap it to rebuild bundles.',
  '.toiletd':
    "Okay this one is a joke: you won't see it. But seriously, caches are safe to delete.",

  // =====================
  // Test / Coverage / CI
  // =====================
  coverage:
    'Test coverage reports (nyc/istanbul). Useful for CI, but fully regenerable.',
  '.nyc_output':
    "nyc's raw coverage output. Safe to delete: coverage will be recomputed.",
  '.jest':
    'Possible Jest cache or artifacts. Deleting may slow the next test run.',
  //   '.cache/jest':
  //     'Jest cache area. Safe to remove if you want tests to start fresh.',
  '.tap-snapshots':
    'Snapshot/test cache. Deleting removes recorded snapshots: be cautious if you rely on them.',
  'playwright-report':
    'Playwright HTML report output. Delete after peeking at the pretty charts.',
  'test-results': 'Generic test results folder (often Playwright). Disposable.',
  cypress:
    'Cypress artifacts (screenshots/videos/logs). Delete if you don’t need recordings from past runs.',

  // =====================
  // Lint / Formatter caches
  // =====================
  '.eslintcache':
    "ESLint cache file. Deleting will make linting slower the first run but won't break anything.",
  '.prettiercache': 'Prettier cache (rare). Safe to remove.',
  '.stylelintcache': 'Stylelint cache. Safe to nuke; it will be recreated.',

  // =====================
  // Editors / IDEs / Local configs
  // =====================
  '.idea':
    'JetBrains IDE project files (workspace settings, caches, etc.). Not build artifacts but can be large: treat with care. WARNING: Contains run configurations, code style settings, and custom tool windows. Usually committed to Git in team projects.',
  '.vscode':
    "VS Code workspace settings and local state. Contains editor preferences, debug configs, etc. Generally safe to remove if you don't share workspace settings. WARNING: Deleting removes custom debug configurations and tasks.",
  '.history':
    'Local editor history (varies by plugin). Can be deleted to shrink repo clones.',
  '.sublime-workspace':
    "Sublime Text workspace state. Safe to remove if you don't need session restore.",
  '.bloop':
    'Scala build server metadata. Deleting will make the next import slower.',
  '.metals': 'Scala Metals IDE cache. Safe to delete; Metals will re-index.',
  '.gradle':
    "Gradle's cache and wrapper downloads. Deleting forces Gradle to re-download dependencies: slows builds but ok.",

  // =====================
  // OS / miscellaneous files (often found in repos)
  // =====================
  '.ds_store':
    'macOS Finder metadata file. This is a file, not folder. Safe to delete.',
  'thumbs.db':
    'Windows image thumbnail cache. This is a file, not folder. Safe to delete.',
  '.vagrant':
    "Vagrant VM state: deleting frees space but you'll lose VM state; recreate with `vagrant up`.",
  '.terraform':
    'Terraform working dir (providers/modules cache). Safe to delete; `terraform init` will re-download.',

  // =====================
  // Package managers / lockstores
  // =====================
  vendor:
    "Composer's PHP dependency folder (or Go vendor folder). Delete and run `composer install` (PHP) or rebuild (Go) to restore. WARNING: Different meaning in PHP vs Go contexts.",
  '.composer': 'Composer global cache/dir. Regenerable by Composer.',
  '.m2':
    'Maven local repository (usually in user home ~/.m2/repository). Contains all downloaded Maven dependencies. Huge sometimes: can be cleaned but re-downloading takes time.',
  '.bundle':
    'Ruby Bundler settings/cache. Safe to remove; `bundle install` will recreate bits.',
  packages:
    'Old .NET/NuGet packages folder (pre-PackageReference style). You can restore with your package manager. WARNING: Verify this is build output, not a source directory containing actual project packages.',

  // =====================
  // Java / JVM
  // =====================
  target:
    'Maven `target` folder (Java) or Cargo `target` folder (Rust). Contains compiled classes and packaged artifacts. Safe to delete and rebuild. WARNING: Generic name used by multiple build systems.',
  out_java: 'IDE/build `out` folder containing compiled classes. Rebuildable.',
  build_classes: 'Generated class files. Safe to delete.',
  '.settings':
    'Eclipse project settings. Not build output, but safe to regenerate.',
  '.classpath':
    'Eclipse metadata. File/dir you can regenerate by re-importing the project.',
  '.project': 'Eclipse project definition. Can be re-created by the IDE.',

  // =====================
  // .NET / C#
  // =====================
  bin: "Compiled binaries folder (used by many ecosystems: .NET, Go, etc.). Delete to rebuild cleanly. WARNING: Very generic name; verify it's build output, not source binaries.",
  obj: 'Intermediate object files (.NET, C++, Unity). Deleting forces a full recompile next time. Safe to delete.',
  '.vs':
    'Visual Studio local workspace data. Safe to delete; VS will rehydrate it.',
  TestResults: 'Visual Studio/.NET test result output. Toss it after runs.',
  artifacts:
    'Generic build artifacts folder used by many .NET repos. Generated: safe to purge and rebuild.',

  // =====================
  // Python
  // =====================
  venv: 'A self-contained Python environment with its own packages. Delete to start fresh, then recreate with `python -m venv venv`.',
  env: 'Another virtual environment name. Same deal as `venv`.',
  __pycache__:
    'Python bytecode caches (.pyc). Safe to delete: Python will recreate them.',
  '.pytest_cache':
    'Pytest cache. Delete to forget previous runs; tests will run fresh.',
  pipenv:
    "Pipenv's virtualenv location (usually in user home directory, not project). Regenerable by Pipenv. WARNING: Typically stored globally, not in project directory.",
  '.venv':
    'Virtual environment, but dot-prefixed. Remove and recreate if you need a clean slate.',
  '.ipynb_checkpoints':
    'Jupyter notebook autosaves. Safe to nuke; notebooks stay.',
  '.mypy_cache': 'mypy type-checker cache. Delete to force a full re-check.',
  '.ruff_cache': 'Ruff linter cache. Safe to delete; Ruff will refill it.',
  '.tox': 'tox environments. Delete and tox will recreate them on next run.',
  '.nox': 'nox virtualenvs. Safe to remove; tasks will recreate.',
  '.pytype': 'pytype analysis cache. Disposable.',
  '.pyre': 'Pyre type checker cache. Disposable.',
  htmlcov: 'HTML coverage output (pytest-cov). Just reports: delete anytime.',

  // =====================
  // Go / Rust / C / C++
  // =====================
  pkg: 'Go compiled package cache (or generic `pkg` dir). Safe to delete: `go build` will restore it.',
  bin_go: 'Compiled Go binaries folder. Deletable and rebuildable.',
  target_rust:
    "Cargo's `target` folder with compiled Rust artifacts. Large but regenerable with `cargo build`.",
  cmake_build: 'CMake output directory. Delete and re-run CMake to rebuild.',
  'cmake-build-debug':
    'CLion/CMake debug build output. Delete and reconfigure builds.',
  'cmake-build-release': 'CLion/CMake release build output. Disposable.',
  CMakeFiles: 'CMake intermediate files. You can remove them safely.',
  Debug:
    'Generic debug build folder (C/C++, Visual Studio). Contains debug binaries. Safe to remove and rebuild.',
  Release:
    'Generic release build folder (C/C++, Visual Studio). Contains optimized binaries. Safe to remove and rebuild.',
  x64: 'Architecture-specific build output. Generated: delete and rebuild.',
  x86: 'Architecture-specific build output. Generated: delete and rebuild.',
  '.cxx': 'Android NDK build cache. Safe to delete; Gradle will regenerate.',
  externalNativeBuild: 'Android external NDK build output. Disposable.',

  // =====================
  // Game engines (from previous list, kept for completeness)
  // =====================
  library:
    "Unity's internal imported-asset cache. Huge but re-creatable: Unity will reimport everything.",
  Library:
    "Unity's actual 'Library' folder (case-sensitive systems). Same deal: giant cache: safe to delete. WARNING: On macOS, DO NOT delete ~/Library (user's system Library). Only delete if it's in a Unity project!",
  Temp: "Unity temp build files. Close the Unity editor first, then delete. WARNING: Generic name; ensure it's in a Unity project context.",
  Obj: "Unity intermediate object cache. Disposable. WARNING: Generic name; verify it's in a Unity project before deleting.",
  intermediate:
    "Unreal temp build files. Safe to delete but expect long rebuilds. WARNING: Generic name; verify it's in an Unreal project.",
  Intermediate:
    "Unreal intermediate files (proper case). Delete to force a clean rebuild. WARNING: Generic name; verify it's in an Unreal project.",
  DerivedDataCache:
    'Unreal Engine derived data cache. Stores cooked/processed assets to speed up builds. Deleting forces re-cooking of assets. WARNING: Can be many GB. Safe to delete but rebuild will be slow.',
  Saved:
    'Unreal Engine saved files (logs, autosaves, cooked content, screenshots). Safe to delete but you may lose local editor settings, autosaves, and cooked assets. WARNING: May contain unsaved work!',
  Binaries:
    'Unreal Engine compiled binaries. Contains game/editor executables and DLLs. Regenerated by the build system. Safe to delete but requires full recompilation.',
  '.import': 'Godot imported assets cache. Re-imports on next run.',
  '.godot':
    'Godot 4 project cache and metadata. Safe to delete; Godot will rebuild it.',

  // =====================
  // Docker / Containers / Cloud
  // =====================
  docker:
    'Local Docker build artifacts (if present in project). WARNING: This is unusual; Docker data is typically in system directories. Verify before deleting as it may contain important container volumes or configs.',
  '.serverless':
    'Serverless Framework output (deploy packages, cloud artifacts). Rebuildable, but check before deleting.',
  '.firebase':
    'Firebase local state/cache. Contains local emulator data and deployment cache. Safe locally but contains deploy helpers. WARNING: May contain local emulator data.',
  '.docusaurus':
    'Docusaurus build cache (v2). You can wipe it; `npm run build` restores output.',

  // =====================
  // Misc / catch-all
  // =====================
  tmp: "Generic temporary files. Safe to clear if the program isn't running. WARNING: Very generic name; ensure programs using it are closed.",
  temp: 'Same as tmp. Temporary files directory. Cleans up disk but might slow first run after deletion. WARNING: Ensure no programs are actively using it.',
  logs: "Log files directory. Useful for debugging, but safe to archive or delete when old. WARNING: Verify logs aren't critical for auditing/compliance before deleting.",
  coverage_reports:
    'Saved coverage outputs: can grow. Delete if you can regenerate.',
  '.cache-ci':
    'Generic CI cache folder. Deleting will make CI re-download dependencies next run.',
  out_static: 'Generic static export output: disposable and rebuildable.',
  '.sass-cache': 'Legacy Sass cache. Totally safe to delete.',
  '.cpcache': 'Clojure CLI compilation cache. Delete to recompile on next run.',
  'dist-newstyle': 'Haskell Cabal build output. Delete and rebuild.',
  '.stack-work':
    'Haskell Stack build cache. Disposable; `stack build` will recreate.',
  _build:
    'Generic build output for many tools (Sphinx, Dune, Elixir Mix, etc.). Safe to delete and rebuild. Commonly used by Elixir, Erlang, OCaml, and Python documentation tools.',
  deps: "Elixir/Erlang dependencies (or generic deps folder). Delete and `mix deps.get` to restore. WARNING: Generic name; verify it's an Elixir/Erlang project.",
  cover: 'Elixir test coverage output. Disposable coverage reports and data.',
  nimcache: 'Nim compiler cache. Safe to nuke; it will recompile.',
  elm_stuff: 'Elm dependency cache. Delete and `elm make` will restore.',
  '.pants.d': 'Pants build system cache. Remove to force clean builds.',
  'buck-out': 'Buck build output. Delete to rebuild.',
  'bazel-bin': 'Bazel binary outputs. Regenerated by Bazel.',
  'bazel-out': 'Bazel build outputs. Disposable.',
  'bazel-testlogs': 'Bazel test logs. Delete freely.',
  deno_dir:
    'Deno cache dir (if set locally). Safe to clear: Deno will fetch again.',
  deno_cache: 'Another name for a local Deno cache dir. Disposable.',
  lightning_logs:
    "PyTorch Lightning logs and checkpoints. Contains training metrics and model checkpoints. WARNING: Delete only if you don't need experiment history or saved model weights!",
  wandb:
    "Weights & Biases run logs. Contains experiment tracking data and artifacts. Big sometimes: delete if you're done with the experiments. WARNING: May contain model checkpoints and metrics!",
  mlruns:
    'MLflow tracking data. Contains experiment runs, parameters, and artifacts. WARNING: Remove only if you accept losing past runs and model artifacts!',
  runs: "TensorBoard logs (often named runs/). Purely for visualization: safe to prune. WARNING: Generic name; verify it's actually TensorBoard logs before deleting.",
  npkill: `You’re aiming at *me*!
  I clean junk... I *am* not junk!
  /(ಥ﹏ಥ)\\`,
  //   npkill: `Ah, recursion.
  //   A beautiful concept... until it deletes itself.
  // `,
};
