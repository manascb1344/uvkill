import { Observable } from 'rxjs';
import {
  ScanFoundFolder,
  GetNewestFileResult,
  GetSizeOptions,
  GetSizeResult,
  ScanOptions,
  DeleteResult,
  DeleteOptions,
} from './folder.interface.js';
import { LogEntry } from '@core/interfaces/logger-service.interface.js';

export type ProfileFilterType = 'base' | 'user' | 'all';

/**
 * Result of validating a root folder path.
 */
export interface IsValidRootFolderResult {
  /** Whether the folder is valid as a root. */
  isValid: boolean;
  /** Reason for invalidity, if not valid. */
  invalidReason?: string;
}

/**
 * Npkill is a powerful search engine that allows you to scan the file system
 * for specified directories. It also allows you to perform operations on them
 * in order to clean them up.
 */
export interface NpkillInterface {
  /**
   * Starts the recursive search from the specified directory.
   * @param rootPath Root directory to scan from.
   * @param options Optional scan options.
   * @returns Observable that emits the results that are found in real time.
   */
  startScan$(
    rootPath: string,
    options?: ScanOptions,
  ): Observable<ScanFoundFolder>;

  /**
   * Stops the current scan if any.
   *
   * Frees resources and terminates the observable returned by `startScan$`.
   */
  stopScan(): void;

  /**
   * Returns the total size of the contents of a directory.
   * @param path Path to the directory.
   * @param options Optional size options.
   * @returns Observable that outputs a value with the result of the operation.
   */
  getSize$(path: string, options?: GetSizeOptions): Observable<GetSizeResult>;

  /**
   * Retrieves the most recently modified file (the one with the latest
   * modification timestamp) within a given directory and its subdirectories,
   * recursively.
   * @param path Path to the directory.
   * @returns Observable that outputs a value with the result of the
   * operation. May return null if no files exist or the most recent file
   * cannot be determined.
   */
  getNewestFile$(path: string): Observable<GetNewestFileResult | null>;

  /**
   * Deletes the specified directory. For security purposes, this directory
   * must be contained within the `target` path defined when initiating the scan
   * with `startScan$` or throw an exception.
   * @param path Path to delete.
   * @param options Optional delete options.
   * @returns Observable emitting the delete result.
   * @throws Error if the path is not within the target directory.
   */
  delete$(path: string, options?: DeleteOptions): Observable<DeleteResult>;

  /**
   * Gets the log stream generated by npkill.
   * @returns Observable emitting an array of log entries.
   */
  getLogs$(): Observable<LogEntry[]>;

  /**
   * Checks if a given route has problems initiating a scan. Validates that the
   * path belongs to a directory, that the directory exists and that there are
   * no permissions issues.
   * @param path Path to validate.
   * @returns Result of validation.
   */
  isValidRootFolder(path: string): IsValidRootFolderResult;

  /**
   * Get the current version of npkill.
   * @returns Version string defined in npkill's package.json.
   */
  getVersion(): string;
}
