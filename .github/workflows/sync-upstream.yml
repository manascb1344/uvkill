name: Sync with Upstream NPKill

on:
  # Run daily at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'

  # Allow manual trigger
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'Force sync even if there are conflicts'
        required: false
        default: false
        type: boolean

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/voidcosmos/npkill.git || true
          git remote -v

      - name: Fetch upstream changes
        run: |
          git fetch upstream
          git fetch origin

      - name: Check for new commits
        id: check_commits
        run: |
          # Get the latest commit hash from upstream main
          UPSTREAM_LATEST=$(git rev-parse upstream/main)
          echo "upstream_latest=$UPSTREAM_LATEST" >> $GITHUB_OUTPUT

          # Check if we already have this commit
          if git merge-base --is-ancestor $UPSTREAM_LATEST HEAD; then
            echo "has_new_commits=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Already up to date with upstream"
          else
            echo "has_new_commits=true" >> $GITHUB_OUTPUT
            echo "üîÑ New commits found in upstream"
            
            # Show new commits
            echo "New commits from upstream:"
            git log --oneline HEAD..upstream/main
          fi

      - name: Create sync branch
        if: steps.check_commits.outputs.has_new_commits == 'true'
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BRANCH_NAME="sync/upstream-$TIMESTAMP"
          echo "SYNC_BRANCH=$BRANCH_NAME" >> $GITHUB_ENV
          git checkout -b $BRANCH_NAME

      - name: Merge upstream changes
        if: steps.check_commits.outputs.has_new_commits == 'true'
        run: |
          # Try to merge upstream changes
          if git merge upstream/main --no-edit; then
            echo "‚úÖ Successfully merged upstream changes"
            echo "MERGE_SUCCESS=true" >> $GITHUB_ENV
          else
            echo "‚ö†Ô∏è Merge conflicts detected"
            echo "MERGE_SUCCESS=false" >> $GITHUB_ENV
            
            # Show conflicted files
            echo "Conflicted files:"
            git status --porcelain | grep "^UU" || true
            
            if [ "${{ github.event.inputs.force_sync }}" = "true" ]; then
              echo "üîß Force sync enabled - attempting automatic resolution"
              # For now, just abort and create an issue
              git merge --abort
            else
              git merge --abort
            fi
          fi

      - name: Push sync branch
        if: steps.check_commits.outputs.has_new_commits == 'true' && env.MERGE_SUCCESS == 'true'
        run: |
          git push origin $SYNC_BRANCH

      - name: Create Pull Request
        if: steps.check_commits.outputs.has_new_commits == 'true' && env.MERGE_SUCCESS == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.SYNC_BRANCH }}
          title: 'üîÑ Sync with upstream NPKill (${{ steps.check_commits.outputs.upstream_latest }})'
          body: |
            ## üîÑ Automated Upstream Sync

            This PR syncs the latest changes from the upstream NPKill repository.

            **Upstream commit:** `${{ steps.check_commits.outputs.upstream_latest }}`
            **Sync timestamp:** $(date)

            ### Changes included:
            $(git log --oneline HEAD~10..HEAD | head -10)

            ### Review checklist:
            - [ ] Review all changes for compatibility with UVKill
            - [ ] Test that Python virtual environment detection still works
            - [ ] Verify that UVKill-specific modifications are preserved
            - [ ] Update version number if needed
            - [ ] Test the build and functionality

            ### ‚ö†Ô∏è Important Notes:
            - This is an automated sync from the upstream NPKill repository
            - Some changes may need manual review for UVKill compatibility
            - If conflicts occur, manual intervention may be required

            Auto-generated by GitHub Actions ü§ñ
          draft: false
          delete-branch: true

      - name: Create Issue for Conflicts
        if: steps.check_commits.outputs.has_new_commits == 'true' && env.MERGE_SUCCESS == 'false'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: '‚ö†Ô∏è Manual sync required - Upstream merge conflicts detected'
          body: |
            ## ‚ö†Ô∏è Upstream Sync Conflicts

            The automated sync with upstream NPKill has detected merge conflicts that require manual resolution.

            **Upstream commit:** `${{ steps.check_commits.outputs.upstream_latest }}`
            **Conflict detected on:** $(date)

            ### To resolve manually:

            ```bash
            # 1. Fetch the latest changes
            git fetch upstream
            git fetch origin

            # 2. Create a new branch for the sync
            git checkout main
            git pull origin main
            git checkout -b sync/manual-$(date +%Y%m%d)

            # 3. Attempt the merge
            git merge upstream/main

            # 4. Resolve conflicts manually
            # Edit the conflicted files and resolve differences
            # Pay special attention to maintaining UVKill-specific changes

            # 5. Complete the merge
            git add .
            git commit
            git push origin sync/manual-$(date +%Y%m%d)

            # 6. Create a PR
            ```

            ### Files likely to have conflicts:
            - Package configuration files (package.json, etc.)
            - Core logic files that were modified for Python virtual envs
            - Documentation files

            ### UVKill-specific files to preserve:
            - All Python virtual environment detection logic
            - UVKill branding and documentation
            - Modified constants and configurations

            Auto-generated by GitHub Actions ü§ñ

      - name: Cleanup on failure
        if: failure()
        run: |
          # Clean up any partial state
          git reset --hard HEAD
          git checkout main
          echo "üßπ Cleaned up failed sync attempt"
